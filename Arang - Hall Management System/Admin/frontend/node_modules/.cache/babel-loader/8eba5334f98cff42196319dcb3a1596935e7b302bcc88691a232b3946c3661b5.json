{"ast":null,"code":"import axios from \"axios\";\nexport default class ApiService {\n  static getHeader() {\n    const token = localStorage.getItem(\"token\");\n    return {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    };\n  }\n\n  /**AUTH */\n\n  /* This  register a new user */\n  static async registerUser(registration) {\n    const response = await axios.post(`${this.BASE_URL}/auth/register`, registration);\n    return response.data;\n  }\n\n  /* This  login a registered user */\n  static async loginUser(loginDetails) {\n    const response = await axios.post(`${this.BASE_URL}/auth/login`, loginDetails);\n    return response.data;\n  }\n\n  /***USERS */\n\n  /*  This is  to get the user profile */\n  static async getAllUsers() {\n    const response = await axios.get(`${this.BASE_URL}/users/all`, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n  static async getUserProfile() {\n    const response = await axios.get(`${this.BASE_URL}/users/get-logged-in-profile-info`, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n\n  /* This is the  to get a single user */\n  static async getUser(userId) {\n    const response = await axios.get(`${this.BASE_URL}/users/get-by-id/${userId}`, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n\n  /* This is the  to get user bookings by the user id */\n  static async getUserBookings(userId) {\n    const response = await axios.get(`${this.BASE_URL}/users/get-user-bookings/${userId}`, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n\n  /* This is to delete a user */\n  static async deleteUser(userId) {\n    const response = await axios.delete(`${this.BASE_URL}/users/delete/${userId}`, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n\n  /**ROOM */\n  /* This  adds a new room room to the database */\n  static async addRoom(formData) {\n    const result = await axios.post(`${this.BASE_URL}/rooms/add`, formData, {\n      headers: {\n        ...this.getHeader(),\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return result.data;\n  }\n\n  /* This  gets all availavle rooms */\n  static async getAllAvailableRooms() {\n    const result = await axios.get(`${this.BASE_URL}/rooms/all-available-rooms`);\n    return result.data;\n  }\n\n  /* This  gets all availavle by dates rooms from the database with a given date and a room type */\n  static async getAvailableRoomsByDateAndType(checkInDate, checkOutDate, roomType) {\n    const result = await axios.get(`${this.BASE_URL}/rooms/available-rooms-by-date-and-type?checkInDate=${checkInDate}\n\t\t&checkOutDate=${checkOutDate}&roomType=${roomType}`);\n    return result.data;\n  }\n\n  /* This  gets all room types from thee database */\n  static async getRoomTypes() {\n    const response = await axios.get(`${this.BASE_URL}/rooms/types`);\n    return response.data;\n  }\n  /* This  gets all rooms from the database */\n  static async getAllRooms() {\n    const result = await axios.get(`${this.BASE_URL}/rooms/all`);\n    return result.data;\n  }\n  /* This funcction gets a room by the id */\n  static async getRoomById(roomId) {\n    const result = await axios.get(`${this.BASE_URL}/rooms/room-by-id/${roomId}`);\n    return result.data;\n  }\n\n  /* This  deletes a room by the Id */\n  static async deleteRoom(roomId) {\n    const result = await axios.delete(`${this.BASE_URL}/rooms/delete/${roomId}`, {\n      headers: this.getHeader()\n    });\n    return result.data;\n  }\n\n  /* This updates a room */\n  static async updateRoom(roomId, formData) {\n    const result = await axios.put(`${this.BASE_URL}/rooms/update/${roomId}`, formData, {\n      headers: {\n        ...this.getHeader(),\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return result.data;\n  }\n\n  /**BOOKING */\n  /* This  saves a new booking to the databse */\n  static async bookRoom(roomId, userId, booking) {\n    console.log(\"USER ID IS: \" + userId);\n    const response = await axios.post(`${this.BASE_URL}/bookings/book-room/${roomId}/${userId}`, booking, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n\n  /* This  gets alll bokings from the database */\n  static async getAllBookings() {\n    const result = await axios.get(`${this.BASE_URL}/bookings/all`, {\n      headers: this.getHeader()\n    });\n    return result.data;\n  }\n\n  /* This  get booking by the cnfirmation code */\n  static async getBookingByConfirmationCode(bookingCode) {\n    const result = await axios.get(`${this.BASE_URL}/bookings/get-by-confirmation-code/${bookingCode}`);\n    return result.data;\n  }\n\n  /* This is the  to cancel user booking */\n  static async cancelBooking(bookingId) {\n    const result = await axios.delete(`${this.BASE_URL}/bookings/cancel/${bookingId}`, {\n      headers: this.getHeader()\n    });\n    return result.data;\n  }\n\n  /**AUTHENTICATION CHECKER */\n  static logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n  }\n  static isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n  static isAdmin() {\n    const role = localStorage.getItem('role');\n    return role === 'ADMIN';\n  }\n  static isUser() {\n    const role = localStorage.getItem('role');\n    return role === 'USER';\n  }\n}\n// export default new ApiService();\nApiService.BASE_URL = \"http://localhost:4040\";","map":{"version":3,"names":["axios","ApiService","getHeader","token","localStorage","getItem","Authorization","registerUser","registration","response","post","BASE_URL","data","loginUser","loginDetails","getAllUsers","get","headers","getUserProfile","getUser","userId","getUserBookings","deleteUser","delete","addRoom","formData","result","getAllAvailableRooms","getAvailableRoomsByDateAndType","checkInDate","checkOutDate","roomType","getRoomTypes","getAllRooms","getRoomById","roomId","deleteRoom","updateRoom","put","bookRoom","booking","console","log","getAllBookings","getBookingByConfirmationCode","bookingCode","cancelBooking","bookingId","logout","removeItem","isAuthenticated","isAdmin","role","isUser"],"sources":["C:/Users/VAISHNAVI.M/Downloads/phegon-hotel-booking-and-management-react-mysql/phegon-hotel-booking-and-management-react-mysql/frontend/src/service/ApiService.js"],"sourcesContent":["import axios from \"axios\"\n\nexport default class ApiService {\n\n    static BASE_URL = \"http://localhost:4040\"\n\n    static getHeader() {\n        const token = localStorage.getItem(\"token\");\n        return {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n        };\n    }\n\n    /**AUTH */\n\n    /* This  register a new user */\n    static async registerUser(registration) {\n        const response = await axios.post(`${this.BASE_URL}/auth/register`, registration)\n        return response.data\n    }\n\n    /* This  login a registered user */\n    static async loginUser(loginDetails) {\n        const response = await axios.post(`${this.BASE_URL}/auth/login`, loginDetails)\n        return response.data\n    }\n\n    /***USERS */\n\n\n    /*  This is  to get the user profile */\n    static async getAllUsers() {\n        const response = await axios.get(`${this.BASE_URL}/users/all`, {\n            headers: this.getHeader()\n        })\n        return response.data\n    }\n\n    static async getUserProfile() {\n        const response = await axios.get(`${this.BASE_URL}/users/get-logged-in-profile-info`, {\n            headers: this.getHeader()\n        })\n        return response.data\n    }\n\n\n    /* This is the  to get a single user */\n    static async getUser(userId) {\n        const response = await axios.get(`${this.BASE_URL}/users/get-by-id/${userId}`, {\n            headers: this.getHeader()\n        })\n        return response.data\n    }\n\n    /* This is the  to get user bookings by the user id */\n    static async getUserBookings(userId) {\n        const response = await axios.get(`${this.BASE_URL}/users/get-user-bookings/${userId}`, {\n            headers: this.getHeader()\n        })\n        return response.data\n    }\n\n\n    /* This is to delete a user */\n    static async deleteUser(userId) {\n        const response = await axios.delete(`${this.BASE_URL}/users/delete/${userId}`, {\n            headers: this.getHeader()\n        })\n        return response.data\n    }\n\n    /**ROOM */\n    /* This  adds a new room room to the database */\n    static async addRoom(formData) {\n        const result = await axios.post(`${this.BASE_URL}/rooms/add`, formData, {\n            headers: {\n                ...this.getHeader(),\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n        return result.data;\n    }\n\n    /* This  gets all availavle rooms */\n    static async getAllAvailableRooms() {\n        const result = await axios.get(`${this.BASE_URL}/rooms/all-available-rooms`)\n        return result.data\n    }\n\n\n    /* This  gets all availavle by dates rooms from the database with a given date and a room type */\n    static async getAvailableRoomsByDateAndType(checkInDate, checkOutDate, roomType) {\n        const result = await axios.get(\n            `${this.BASE_URL}/rooms/available-rooms-by-date-and-type?checkInDate=${checkInDate}\n\t\t&checkOutDate=${checkOutDate}&roomType=${roomType}`\n        )\n        return result.data\n    }\n\n    /* This  gets all room types from thee database */\n    static async getRoomTypes() {\n        const response = await axios.get(`${this.BASE_URL}/rooms/types`)\n        return response.data\n    }\n    /* This  gets all rooms from the database */\n    static async getAllRooms() {\n        const result = await axios.get(`${this.BASE_URL}/rooms/all`)\n        return result.data\n    }\n    /* This funcction gets a room by the id */\n    static async getRoomById(roomId) {\n        const result = await axios.get(`${this.BASE_URL}/rooms/room-by-id/${roomId}`)\n        return result.data\n    }\n\n    /* This  deletes a room by the Id */\n    static async deleteRoom(roomId) {\n        const result = await axios.delete(`${this.BASE_URL}/rooms/delete/${roomId}`, {\n            headers: this.getHeader()\n        })\n        return result.data\n    }\n\n    /* This updates a room */\n    static async updateRoom(roomId, formData) {\n        const result = await axios.put(`${this.BASE_URL}/rooms/update/${roomId}`, formData, {\n            headers: {\n                ...this.getHeader(),\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n        return result.data;\n    }\n\n\n    /**BOOKING */\n    /* This  saves a new booking to the databse */\n    static async bookRoom(roomId, userId, booking) {\n\n        console.log(\"USER ID IS: \" + userId)\n\n        const response = await axios.post(`${this.BASE_URL}/bookings/book-room/${roomId}/${userId}`, booking, {\n            headers: this.getHeader()\n        })\n        return response.data\n    }\n\n    /* This  gets alll bokings from the database */\n    static async getAllBookings() {\n        const result = await axios.get(`${this.BASE_URL}/bookings/all`, {\n            headers: this.getHeader()\n        })\n        return result.data\n    }\n\n    /* This  get booking by the cnfirmation code */\n    static async getBookingByConfirmationCode(bookingCode) {\n        const result = await axios.get(`${this.BASE_URL}/bookings/get-by-confirmation-code/${bookingCode}`)\n        return result.data\n    }\n\n    /* This is the  to cancel user booking */\n    static async cancelBooking(bookingId) {\n        const result = await axios.delete(`${this.BASE_URL}/bookings/cancel/${bookingId}`, {\n            headers: this.getHeader()\n        })\n        return result.data\n    }\n\n\n    /**AUTHENTICATION CHECKER */\n    static logout() {\n        localStorage.removeItem('token')\n        localStorage.removeItem('role')\n    }\n\n    static isAuthenticated() {\n        const token = localStorage.getItem('token')\n        return !!token\n    }\n\n    static isAdmin() {\n        const role = localStorage.getItem('role')\n        return role === 'ADMIN'\n    }\n\n    static isUser() {\n        const role = localStorage.getItem('role')\n        return role === 'USER'\n    }\n}\n// export default new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}